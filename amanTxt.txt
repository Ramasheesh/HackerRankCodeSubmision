//seriallyPromise

let fs = require("fs");

let arr = ['./f1.txt','./f2.txt','./f3.txt','./f4.txt','./f5.txt']

let filePromise = fs.promises.readFile(arr[0]);

for(let i=1;i<arr.length;i++){
    filePromise = filePromise.then(function(data){
        console.log(data+"");
        let nextFilePromise = fs.promises.readFile(arr[i]);
        return nextFilePromise;
    })
}

filePromise.then(function(data){
    console.log(data+"");
})


_____________________________________________code.js
module.exports = {
    answers: [`
    #include <bits/stdc++.h>
            using namespace std;
            
            int main(){
                int number_of_elements;
                cin >> number_of_elements;
                vector <int> array(number_of_elements);
                int sum_of_array = 0;
                
                for(int i = 0; i < number_of_elements; i++){
                   cin >> array[i];
                   sum_of_array += array[i];
                }
                
                cout << sum_of_array;
                return 0;
            }
    `,`#include <bits/stdc++.h>
    using namespace std;
    int N;
    int A[100];
    int main()
    {
        for(int i=0; i<3; i++)
            scanf("%d", A+i);
        int a, b=0, c=0;
        for(int i=0; i<3; i++)
        {
            scanf("%d", &a);
            if(a>A[i])
                c++;
            else if(a<A[i])
                b++;
        }
        printf("%d %d\n", b, c);
        return 0;
    }> 
    `,`#include <cmath>
    #include <cstdio>
    #include <vector>
    #include <iostream>
    #include <algorithm>
    using namespace std;
    int main() {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
        long long sum=0;
        int n;
        cin>>n;
        int data;
        for(int i=0;i<n;i++) {
            cin>>data;
            sum+=data;
        }
        cout<<sum<<endl;
        return 0;
    }
    `,`
    #include <iostream>
    using namespace std;
    int main() {
        int n;
        cin >> n;
        int arr[n][n];
        long long int d1=0; //First Diagonal
        long long int d2=0; //Second Diagonal
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> arr[i][j];
                if (i == j) d1 += arr[i][j];
                if (i == n - j - 1) d2 += arr[i][j];
            }
        }
        cout << abs(d1 - d2) << endl; //Absolute difference of the sums across the diagonals
        return 0;
    }
    `,`#include <cmath>
    #include <cstdio>
    #include <vector>
    #include <iostream>
    #include <algorithm>
    using namespace std;
    int main() {
        int p=0,n=0,z=0,a,i,j;
        cin>>j;
        for(i=0;i<j;i++){
            cin>>a;
            
            if(a>0)
                p++;
            else if(a<0)
                n++;
            else
                z++;
        }
        
        printf("%.3f\n",(float)p/j);
        printf("%.3f\n",(float)n/j);
        printf("%.3f",(float)z/j);
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
        return 0;
    }
    `,`#include <cmath>
    #include <cstdio>
    #include <vector>
    #include <iostream>
    #include <algorithm>
    using namespace std;
    int main() {
        
        int n,i,j,k;
        cin>>n;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=n-i;j++)
            {
                cout<<" ";    
            }
            for(k=j;k<=n;k++)
            {
                cout<<"#";    
            }
            cout<<"\n";
        }
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
        return 0;
    } 
    `,`#include <bits/stdc++.h>
    typedef long long LL;
    using namespace std;
    int main(){
        LL s[5];
        LL d = 0;
        for(int i = 0; i < 5; i++){
            cin >> s[i];
            d += s[i];
        }
        sort(s,s+5);
        cout << d-s[4] << " " << d-s[0] << endl;
    }
    `,`#include<bits/stdc++.h>
    using namespace std;
    typedef long long ll;
    typedef vector<int> vi;
    typedef pair<int,int> pii;
    typedef pair<ll,ll> pll;
    typedef vector<pii> vpii;
    typedef unsigned long long llu;
    #define author ayushtomar
    #define rf freopen("in.txt", "r", stdin)
    #define wf freopen("out.txt", "w", stdout)
    #define debug(x) cerr<<#x<<" "<<x<<endl;
    #define f first
    #define s second
    #define mp make_pair
    #define pb push_back
    map < int ,int > ma;
    int main()
    {
        int n;
        cin>>n;
        int ans=-1;
        for(int i=0;i<n;i++) {
                int x;
            cin>>x;
            ma[x]++;
            ans=max(ans,x);
        }
        cout<<ma[ans];
    return 0;
    }
    `,`#include <cmath>
    #include <cstdio>
    #include <vector>
    #include <iostream>
    #include <algorithm>
    using namespace std;
    int main() {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
        string s;
        string h;
        int hr;
        cin>>s;
        hr = ((s[0]-'0')*10)+(s[1]-'0');
        if(s[8]=='P'&&s[9]=='M'&& hr ==12) cout<<to_string(hr);
        else if(s[8]=='P'&&s[9]=='M') cout<<to_string(hr+12);
        else if(s[8]=='A'&&s[9]=='M'&&hr==12) cout<<"00";
        
        else cout<< s[0]<<s[1];
        
       
        for(int i =2;i<8;i++)
            cout<<s[i];
        cout<<endl;
        return 0;
    }
    `]
}
__________________________________________hk.js  main
const puppeteer = require("puppeteer");
const mail = "gavic76183@carsik.com";
const pass = "abcdef";
const code = require('./code');

let browserPromise = puppeteer.launch({ headless: false, defaultViewport: null,args: ['--start-fullscreen'] });
let page;
browserPromise.then(function(browser){
    console.log("Browser is opened");
    let pagePromise = browser.newPage();
    return pagePromise;
}).then(function(pageInstance){
    console.log("Page is opened");
    page = pageInstance
    let urlPromise = page.goto('https://www.hackerrank.com/');
    return urlPromise;
}).then(function(){
    return waitAndClick('ul.menu a');
}).then(function(){
    let waitPromise = page.waitForSelector(".fl-module-content.fl-node-content .fl-button");
    return waitPromise;
}).then(function(){
    let domClickPromse = page.evaluate(function(){
        let btns = document.querySelectorAll(".fl-module-content.fl-node-content .fl-button");
        btns[1].click();
        return;
    });
    return domClickPromse;
}).then(function(){
    let waitPromise = page.waitForSelector("#input-1");
    return waitPromise;
}).then(function(){
    let mailTypedPromise = page.type("#input-1",mail,{ delay: 100 });
    return mailTypedPromise;
}).then(function(){
    let passTypedPromise = page.type("#input-2",pass,{delay:100});
    return passTypedPromise;
}).then(function(){
    let clickPromse = page.click('button[data-analytics="LoginPassword"]');
    return clickPromse;
}).then(function(){
    return waitAndClick('[data-automation="algorithms"]');
})
.then(function(){
    return page.waitForSelector(".filter-group");
}).then(function(){
    let domSelectPromise = page.evaluate(function(){
        let allDivs = document.querySelectorAll(".filter-group");
        let div = allDivs[3];
        let clickSelector = div.querySelector(".ui-checklist-list-item input");
        clickSelector.click();
        return;
    })
    return domSelectPromise;
}).then(function(){
    console.log("warmup Selected");
    return page.waitForSelector('.challenges-list .js-track-click.challenge-list-item');
}).then(function(){
    let arrPromise = page.evaluate(function(){
        let arr = [];
        let aTags = document.querySelectorAll('.challenges-list .js-track-click.challenge-list-item');
        for(let i=0;i<aTags.length;i++){
            let link =  aTags[i].href;
            console.log(link);
            arr.push(link);
        }
        return arr;
    })
    return arrPromise;
}).then(function(questionsArr){
    console.log(questionsArr);
    console.log(code.answers.length);
    let questionPromise = questionSolver(questionsArr[0],code.answers[0]);
    for(let i=1;i<questionsArr.length;i++){
        questionPromise = questionPromise.then(function(){
            let nextQuestionPromise = questionSolver(questionsArr[i],code.answers[i]);
            return nextQuestionPromise;
        })
    }
    return questionPromise;
}).then(function(){
    console.log("All the warm up questions have been submitted!!!");
})



function waitAndClick(selector){
    return new Promise(function(resolve,reject){
        let waitPromise = page.waitForSelector(selector);
        waitPromise.then(function(){
            let clickPromise = page.click(selector);
            return clickPromise;
        }).then(function(){
            resolve();
        });
    })
}


function questionSolver(question,answer){
    return new Promise(function(resolve,reject){
        let linkPromise = page.goto(question);
        linkPromise.then(function(){
            return waitAndClick('.checkBoxWrapper input');
        }).then(function(){
            return waitAndClick('.ui-tooltip-wrapper textarea');
        }).then(function(){
            let typePromise = page.type('.ui-tooltip-wrapper textarea',answer);
            return typePromise;
        }).then(function(){
            let holdControl = page.keyboard.down('Control');
            return holdControl;
        }).then(function(){
            let pressA = page.keyboard.press('A');
            return pressA;
        }).then(function(){
            let pressX = page.keyboard.press('X');
            return pressX;
        }).then(function(){
            let upControl = page.keyboard.up('Control');
            return upControl;
        }).then(function(){
            return waitAndClick('.monaco-editor.no-user-select.vs');
        }).then(function(){
            let holdControl = page.keyboard.down('Control');
            return holdControl;  
        }).then(function(){
            let pressA = page.keyboard.press('A');
            return pressA;
        }).then(function(){
            let pressV = page.keyboard.press('V');
            return pressV;
        }).then(function(){
            let upControl = page.keyboard.up('Control');
            return upControl;
        }).then(function(){
            return waitAndClick('.ui-btn.ui-btn-normal.ui-btn-primary.pull-right.hr-monaco-submit.ui-btn-styled');
        }).then(function(){
            console.log("questions submitted success");
            resolve();
        })
    })
}
__________________________________________________hkAsyncAwait.js
const puppeteer = require("puppeteer");
const mail = "gavic76183@carsik.com";
const pass = "abcdef";
const code = require('./code');

(async function(){
    let browser = await puppeteer.launch({ headless: false, defaultViewport: null,args: ['--start-fullscreen'] });
    let page = await browser.newPage();
    await page.goto('https://www.hackerrank.com/');
    await waitAndClick('ul.menu a',page);
    await page.waitForSelector(".fl-module-content.fl-node-content .fl-button");
    await page.evaluate(function(){
        let btns = document.querySelectorAll(".fl-module-content.fl-node-content .fl-button");
        btns[1].click();
        return;
    });
    await page.waitForSelector("#input-1");
    await page.type("#input-1",mail,{ delay: 100 });
    await page.type("#input-2",pass,{delay:100});
    await waitAndClick('button[data-analytics="LoginPassword"]',page);
    await waitAndClick('[data-automation="algorithms"]',page);
    await page.waitForSelector(".filter-group");
    await page.evaluate(function(){
        let allDivs = document.querySelectorAll(".filter-group");
        let div = allDivs[3];
        let clickSelector = div.querySelector(".ui-checklist-list-item input");
        clickSelector.click();
        return;
    });
    await page.waitForSelector('.challenges-list .js-track-click.challenge-list-item');
    let questionsArr = await page.evaluate(function(){
        let arr = [];
        let aTags = document.querySelectorAll('.challenges-list .js-track-click.challenge-list-item');
        for(let i=0;i<aTags.length;i++){
            let link =  aTags[i].href;
            console.log(link);
            arr.push(link);
        }
        return arr;
    })
    for(let i=0;i<questionsArr.length;i++){
        await questionSolver(questionsArr[i],code.answers[i],page);
    }
})();


async function waitAndClick(selector,page){
    await page.waitForSelector(selector);
    await page.click(selector);
}

async function questionSolver(question,answer,page){
    await page.goto(question);
    await waitAndClick('.checkBoxWrapper input',page);
    await waitAndClick('.ui-tooltip-wrapper textarea',page);
    await page.type('.ui-tooltip-wrapper textarea',answer);
    await page.keyboard.down('Control');
    await page.keyboard.press('A');
    await page.keyboard.press('X');
    await page.keyboard.up('Control');
    await waitAndClick('.monaco-editor.no-user-select.vs',page);
    await page.keyboard.down('Control');
    await page.keyboard.press('A');
    await page.keyboard.press('V');
    await page.keyboard.up("Control");
    await waitAndClick('.ui-btn.ui-btn-normal.ui-btn-primary.pull-right.hr-monaco-submit.ui-btn-styled',page);
}



_______________________________________________promise wala function
function promisifiedFunc(){
    return new Promise(function(resolve,reject){
        //code 
        let a = 1;
        let b = 1;
        if(a == b){
            resolve("Equal");
        }else{
            reject("Unequal");
        }
    })
}

let somePromise = promisifiedFunc();

somePromise.then(function(x){
    console.log(x);
})
somePromise.catch(function(err){
    console.log(err);
})

_________________________________________row.js
const puppeteer = require('puppeteer');

let browserPromise = puppeteer.launch({ headless: false });

browserPromise.then(function(browser){
    console.log("Browser is opened");
    let pagePromise = browser.newPage();
    return pagePromise;
}).then(function(page){
    console.log("page is opened");
    let urlPromise = page.goto('https://www.google.com/');
    return urlPromise
}).then(function(){
    console.log("google is opened");
})